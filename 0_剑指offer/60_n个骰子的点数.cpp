// 动态规划
class Solution {
public:
    // 因为最后的结果只与前一个动态转移数组有关，因此只需要设置一个一维的动态转移数组
    // 原本dp[i][j]表示的是前i个骰子的点数之和为j的概率，现在只需要知道最后的状态数组，因此用一个一维数组dp[j表示n个骰子下每个结果的概率
    vector<double> dicesProbability(int n) {
        // 起始是一个骰子情况下的点数之和情况，就只有六个结果，初始化size为6
        dp = vector<double> (6, 1.0 / 6.0);
        // 从第二个骰子开始，n表示n个骰子，从两个逐步求到n个
        // i表示当总共i个骰子时的结果
        for (int i = 2; i <= n; ++i) {
            // 每次的点数之和范围会有变化，点数之和最大是i * 6，最小是i * 1
            // i之前的结果不会出现，比如i = 3.和最小是3，i之前的结果不会出现
            // 因此点数之和的种类数为6 * i - (i - 1)，化简得5 * i + 1
            vector<double> temp(5 * i + 1);
            // 从i - 1个骰子的点数之和的值入手，计算i个骰子的点数之和数组的值
            // 先拿i - 1个骰子的点数之和数组的第j个值，它所影响的是i个骰子时的temp[j + k]的值
            for (int j = 0; j < dp.size(); ++j) {
                // 比如只有一个骰子时，dp[1]代表当骰子点数之和为2时的概率
                // 它会对当有两个骰子时的点数之和为3、4、5、6、7、8产生影响
                for (int k = 0; k < 6; ++k) {
                    temp[j + k] += dp[j] * (1.0 / 6.0);
                }
            }
            //i个骰子的点数之和全都算出来后，要将temp数组移交给dp数组
            // dp数组就会代表i个骰子时的可能出现的点数之和的概率；用于计算i+1个骰子时的点数之和的概率
            dp = temp;
        }
        return dp;
    }
private:
    vector<double> dp;
};